## ams_version=1.0

Model Main_iptwist {
	Comment: "geoAbstract::api::APIServer";
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
		}
		Section Inputs {
			StringParameter sp_myIPAddress;
		}
		Section Outputs {
			StringParameter sp_city {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_country {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_countryCode {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			Parameter p_lat {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			Parameter p_lon {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_state {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_timezone {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_zip {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  
					  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  
					  ( 1, 1, tooltip           ) : "welcome"            ,
					  ( 1, 1, workflowPageState ) : "active"             ,  
					  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 1, redirectPageId    ) : ""                   ,  
					
					  ( 1, 2, displayText       ) : "Story"              ,
					  ( 1, 2, icon              ) : "aimms-lamp5"        ,  
					  ( 1, 2, pageId            ) : "welcome"            ,
					  ( 1, 2, tooltip           ) : "Problem description",  
					  ( 1, 2, workflowPageState ) : "active"             ,
					  ( 1, 2, pageDataState     ) : "Incomplete"         ,  
					  ( 1, 2, redirectPageId    ) : "home"               ,
					
					  ( 1, 3, displayText       ) : "Find IP"            ,  
					  ( 1, 3, icon              ) : "aimms-location5"    ,
					  ( 1, 3, pageId            ) : "findip"             ,  
					  ( 1, 3, tooltip           ) : "Locate an ip"       ,
					  ( 1, 3, workflowPageState ) : "active"             ,  
					  ( 1, 3, pageDataState     ) : "Incomplete"         ,
					  ( 1, 3, redirectPageId    ) : "home"                
					}
				}
			}
		}
		Section Pages {
			Section Find_IP_Page {
				Set s_locations {
					Index: i_loc;
					Definition: data{ipLocation};
				}
				ElementParameter ep_def_location {
					Range: s_locations;
					Definition: first(s_locations);
				}
				Parameter p_shownLocationLatitude {
					IndexDomain: i_loc;
				}
				Parameter p_shownLocationLongitude {
					IndexDomain: i_loc;
				}
				Parameter p_shownLocationSize {
					IndexDomain: i_loc;
					Definition: 2;
					webui::AnnotationsIdentifier: sp_locationAnnotation;
					webui::TooltipIdentifier: sp_locationTooltip(i_loc);
				}
				StringParameter sp_locationTooltip {
					IndexDomain: i_loc;
					Definition: "You are here.";
				}
				StringParameter sp_locationAnnotation {
					IndexDomain: i_loc;
					Definition: "blue";
				}
				Parameter p_shownLocationRefSize {
					Definition: 5;
				}
				StringParameter sp_findIpSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						{
							( '1', 'displaytext' ) : "GeoLocate", 
							( '1', 'icon'        ) : "aimms-compass4", 
							( '1', 'procedure'   ) : "pr_obtainGeolocationInformation", 
							( '1', 'state'       ) : "Active"
						}
					}
				}
				Procedure pr_obtainGeolocationInformation {
					Body: {
						s_loc_actions := {'CANCEL', 'OK'};
						
						if sp_myIPAddress then
							if sp_apiKey = "" then
							    sp_apiKey := "<add your api key here>";
						        endif;
						
							webui::OpenDialogPage(
								pageId  :  'dialogensureapi', 
								title   :  "Adding api key", 
								actions :  s_loc_actions, 
								onDone  :  'pr_onDoneObtainGeolocationInformation');
						else
							raise warning "Please specify the IP address you want to be GeoLocated" ;
						endif ;
					}
					Set s_loc_actions;
				}
				Procedure pr_onDoneObtainGeolocationInformation {
					Arguments: (sp_button);
					Body: {
						if sp_button = "OK" then
							! pr_GeolocateMakeRequest();
							pr_GeolocateMakeRequest();
						endif ;
					}
					StringParameter sp_button {
						Property: Input;
					}
				}
			}
		}
		Section FlagsIdentifier {
			StringParameter sp_readOnlyFlag {
				Definition: "readonly";
			}
		}
	}
	Section Leveraging_DEX {
		StringParameter sp_apiKey;
		Section abstractapi_implementations {
			Function fnc_httpErrorCodeToString {
				Arguments: (ep_statusCode);
				Range: string;
				Body: {
					sp_errMsg := formatString("%e %s", ep_statusCode, dex::HTTPStatusCodeDescription(ep_statusCode) );
					fnc_httpErrorCodeToString := sp_errMsg ;
				}
				Comment: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses";
				ElementParameter ep_statusCode {
					Range: dex::HTTPStatusCodes;
					Property: Input;
				}
				StringParameter sp_errMsg;
			}
			Procedure pr_GeolocateMakeRequest {
				Body: {
					! Starting current call.
					geoAbstract::api::NewCallInstance(ep_callInstance);
					
					! Install hook, which will copy the data or handle the error
					geoAbstract::api::get_v1_::UserResponseHook := 
						'pr_abstractapi_ResponseHook' ;
					
					! Start the request.
					geoAbstract::api::get_v1_::apiCall(ep_callInstance,sp_apiKey,sp_myIPAddress);
				}
				ElementParameter ep_callInstance {
					Range: geoAbstract::Instances;
				}
			}
			Procedure pr_ResponseHook {
				Arguments: (ep_callInstance);
				Body: {
					if geoAbstract::api::CallStatusCode(ep_callInstance) then
						switch geoAbstract::api::CallStatusCode(ep_callInstance) do
					
					
							'200':
								! Success, copy data retrieved to application core data structures.
								block ! Copy to data structures of scalar widget.
									sp_city         := geoAbstract::_inline_response_200::city(        ep_callInstance);
									sp_country      := geoAbstract::_inline_response_200::country(     ep_callInstance);
									sp_countryCode  := geoAbstract::_inline_response_200::country_code(ep_callInstance);
									p_lat           := geoAbstract::_inline_response_200::latitude(    ep_callInstance);
									p_lon           := geoAbstract::_inline_response_200::longitude(   ep_callInstance);
									sp_state        := geoAbstract::_inline_response_200::region_(       ep_callInstance);
									sp_timezone     := geoAbstract::_inline_response_200::timezone_::name_(   ep_callInstance);
									sp_zip          := geoAbstract::_inline_response_200::postal_code(         ep_callInstance);
								endblock ;
								geoAbstract::_inline_response_200::EmptyInstance(ep_callInstance);
								block ! Use data in core data structures for presentation purposes.
									p_shownLocationLatitude(  ep_def_location ) := p_lat ;
									p_shownLocationLongitude( ep_def_location ) := p_lon ;
								endblock ;
					
							'400','401','402','403','404','405','406','407','408','409','410','411','412','413','414','415','416','417','421','422','423','424','425','426','427','428','429','431','451',
							'500','501','502','503','504','505','506','507','508','510','511':
								raise error formatString("geoAbstract::Geolocate(%s) failed (instance: \'%e\', status: %e, error: %e): %s",
									sp_myIPAddress, ep_callInstance, 
									geoAbstract::api::CallStatusCode(ep_callInstance), 
									geoAbstract::api::CallErrorCode(ep_callInstance), 
									fnc_httpErrorCodeToString( geoAbstract::api::CallStatusCode(ep_callInstance) ) );
					
							default:
								raise error formatString("geoAbstract::Geolocate(%s) failed (instance: \'%e\', status: %e, error: %e): %s",
									sp_myIPAddress, ep_callInstance,
									geoAbstract::api::CallStatusCode(ep_callInstance), 
									geoAbstract::api::CallErrorCode(ep_callInstance), 
									"unknown reason" );
					
						endswitch ;
					else
						dex::client::GetErrorMessage( geoAbstract::api::CallErrorCode(ep_callInstance), _sp_curlMessage);
						raise error formatString("geoAbstract::Geolocate(%s) failed (instance: \'%e\', status: %e, error: %e): %s",
									sp_myIPAddress, ep_callInstance, 
									geoAbstract::api::CallStatusCode(ep_callInstance), 
									geoAbstract::api::CallErrorCode(ep_callInstance), 
									"curl error: " + _sp_curlMessage );
					endif ;
				}
				ElementParameter ep_callInstance {
					Range: geoAbstract::Instances;
					Property: Input;
				}
				StringParameter _sp_curlMessage;
			}
		}
	}
	Section Application_initialization_and_termination {
		Procedure MainInitialization {
			Body: {
				ProfilerStart();
			}
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				sp_myIPAddress := "111.111.111.111" ; ! Tokyo, Japan.
				CurrentInputs -= Outputs;
				dex::ReadAllMappings();
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure pr_startup {
			Body: {
				dex::client::DetermineProxyServer();
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
