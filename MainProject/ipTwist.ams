## ams_version=1.0

Model Main_iptwist {
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
		}
		Section Inputs {
			StringParameter sp_myIPAddress;
		}
		Section Outputs {
			StringParameter sp_city {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_country {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_countryCode {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			Parameter p_lat {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			Parameter p_lon {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_state {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_timezone {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
			StringParameter sp_zip {
				webui::FlagsIdentifier: sp_readOnlyFlag;
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  ( 1, 1, tooltip           ) : "welcome"            ,
					  ( 1, 1, workflowPageState ) : "active"             ,  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 1, redirectPageId    ) : "home"               ,  ( 1, 2, displayText       ) : "Story"              ,
					  ( 1, 2, icon              ) : "aimms-lamp5"        ,  ( 1, 2, pageId            ) : "welcome"            ,
					  ( 1, 2, tooltip           ) : "Problem description",  ( 1, 2, workflowPageState ) : "active"             ,
					  ( 1, 2, pageDataState     ) : "Incomplete"         ,  ( 1, 2, redirectPageId    ) : "home"               ,
					  ( 1, 3, displayText       ) : "Find IP"            ,  ( 1, 3, icon              ) : "aimms-location5"    ,
					  ( 1, 3, pageId            ) : "findip"             ,  ( 1, 3, tooltip           ) : "Locate an ip"       ,
					  ( 1, 3, workflowPageState ) : "active"             ,  ( 1, 3, pageDataState     ) : "Incomplete"         ,
					  ( 1, 3, redirectPageId    ) : "home"                }
				}
			}
		}
		Section Pages {
			Section Find_IP_Page {
				Set s_locations {
					Index: i_loc;
					Definition: data{ipLocation};
				}
				ElementParameter ep_location {
					Range: s_locations;
					Definition: first(s_locations);
				}
				Parameter p_shownLocationLatitude {
					IndexDomain: i_loc;
				}
				Parameter p_shownLocationLongitude {
					IndexDomain: i_loc;
				}
				Parameter p_shownLocationSize {
					IndexDomain: i_loc;
					Definition: 2;
					webui::AnnotationsIdentifier: sp_locationAnnotation;
					webui::TooltipIdentifier: sp_locationTooltip(i_loc);
				}
				StringParameter sp_locationTooltip {
					IndexDomain: i_loc;
					Definition: "You are here.";
				}
				StringParameter sp_locationAnnotation {
					IndexDomain: i_loc;
					Definition: "blue";
				}
				Parameter p_shownLocationRefSize {
					Definition: 5;
				}
				StringParameter sp_findIpSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						{
							( '1', 'displaytext' ) : "GeoLocate", 
							( '1', 'icon'        ) : "aimms-compass4", 
							( '1', 'procedure'   ) : "pr_obtainGeolocationInformation", 
							( '1', 'state'       ) : "Active"
						}
					}
				}
				Procedure pr_obtainGeolocationInformation {
					Body: {
						s_loc_actions := {'CANCEL', 'OK'};
						
						if not sp_myIPAddress then
						    sp_myIPAddress := "<add your api key here>";
						endif;
						
						if sp_myIPAddress then
							if sp_ipTwist_apiKey then
								pr_GeolocateMakeRequest();
							else
								webui::OpenDialogPage(
									pageId  :  'dialogensureapi', 
									title   :  "Adding api key", 
									actions :  s_loc_actions, 
									onDone  :  'pr_onDoneObtainGeolocationInformation');
							endif ;
						else
						    s_loc_actions := {'OK'};
						
							webui::RequestPerformWebUIDialog(
						        title   :  "Something went wrong!", 
						        message :  "Please specify the IP address you want to be GeoLocated.", 
						        actions :  s_loc_actions, 
						        onDone  :  '');
						endif;
					}
					Set s_loc_actions;
				}
				Procedure pr_onDoneObtainGeolocationInformation {
					Arguments: (sp_button);
					Body: {
						if sp_button = "OK" then
							ipTwist::api::APIKey(ipTwist::api::secscheme):= sp_ipTwist_apiKey ;
							pr_GeolocateMakeRequest();
						endif ;
					}
					StringParameter sp_button {
						Property: Input;
					}
				}
			}
		}
		Section FlagsIdentifier {
			StringParameter sp_readOnlyFlag {
				Definition: "readonly";
			}
		}
	}
	Section Leveraging_DEX {
		StringParameter sp_ipTwist_apiKey {
			InitialData: "";
		}
		Function fnc_errorFunc {
			Arguments: (ep_statusCode);
			Range: string;
			Body: {
				sp_errMsg := "" ;
				switch ep_statusCode do
					'401' : sp_errMsg := "Invalid authentication" ;
					'403' : sp_errMsg := "Monthly quota exceeded" ;
					default: sp_errMsg := "unknown reason" ;
				endswitch ;
				fnc_errorFunc := sp_errMsg ;
			}
			ElementParameter ep_statusCode {
				Range: dex::HTTPStatusCodes;
				Property: Input;
			}
			StringParameter sp_errMsg;
		}
		Procedure pr_GeolocateMakeRequest {
			Body: {
				! Starting current call.
				ipTwist::api::NewCallInstance(ep_openapi_ipTwist_CallInstance);
				
				! Fill in the data for making the request.
				ipTwist::_Request::ip(ep_openapi_ipTwist_CallInstance) := sp_myIPAddress ;
				
				! Workaround.
				! Clear RequestFile to ensure it will reference a correctly generated input file.
				ipTwist::api::post_::RequestFile(ipTwist::api::post_::reqpart) := "" ;
				
				! Install hook, which will copy the data or handle the error
				ipTwist::api::post_::UserResponseHook :=
					'pr_GeolocateResponseHook' ;
				
				! Start the request.
				ipTwist::api::post_::apiCall(ep_openapi_ipTwist_CallInstance);
			}
			ElementParameter ep_openapi_ipTwist_CallInstance {
				Range: ipTwist::Instances;
			}
		}
		Procedure pr_GeolocateResponseHook {
			Arguments: (ep_callInstance);
			Body: {
				switch ipTwist::api::CallStatusCode(ep_callInstance) do
				
					'200':
						! Success, add user to core data structures.
						block ! Copy to data structures of scalar widget.
						sp_city         := ipTwist::_Response::city(        ep_callInstance);
						sp_country      := ipTwist::_Response::country(     ep_callInstance);
						sp_countryCode  := ipTwist::_Response::country_code(ep_callInstance);
						p_lat           := ipTwist::_Response::latitude(    ep_callInstance);
						p_lon           := ipTwist::_Response::longitude(   ep_callInstance);
						sp_state        := ipTwist::_Response::state(       ep_callInstance);
						sp_timezone     := ipTwist::_Response::timezone_(   ep_callInstance);
						sp_zip          := ipTwist::_Response::zip(         ep_callInstance);
						endblock ;
						block ! Copy to data structures of map widget.
							p_shownLocationLatitude(  ep_location ) := p_lat ;
							p_shownLocationLongitude( ep_location ) := p_lon ;
						endblock ;
				
				
					'400','401','402','403','404','405','406','407','408','409','410','411','412','413','414','415','416','417','421','422','423','424','425','426','427','428','429','431','451',
					'500','501','502','503','504','505','506','507','508','510','511':
						raise error formatString("ipTwist::Geolocate(%s) failed (status: %e, error: %e): %s",
							sp_myIPAddress,
							openapi_ipTwist::api::CallStatusCode(ep_callInstance), 
							openapi_ipTwist::api::CallErrorCode(ep_callInstance), 
							fnc_errorFunc( ipTwist::api::CallStatusCode(ep_callInstance) ) );
				
					default:
						raise error formatString("ipTwist::Geolocate(%s) failed (status: %e, error: %e): %s",
							sp_myIPAddress,
							openapi_ipTwist::api::CallStatusCode(ep_callInstance), 
							openapi_ipTwist::api::CallErrorCode(ep_callInstance), 
							"unknown reason" );
				
				endswitch ;
			}
			ElementParameter ep_callInstance {
				Range: ipTwist::Instances;
				Property: Input;
			}
		}
	}
	Section Application_initialization_and_termination {
		Procedure MainInitialization {
			Body: {
				ProfilerStart();
				if FileExists( "../ipTwist_apiKey.txt" ) then
					Read from file "../ipTwist_apiKey.txt" ;
				endif ;
				
				ipTwist::api::APIKey(ipTwist::api::secscheme):= sp_ipTwist_apiKey ;
				ipTwist::api::APIServer := "https://iptwist.com" ;
				ipTwist::api::RequestResponseFilePrefix := "./RequestResponseFileFolder/";
				
				ipTwist::pr_readMappings();
			}
			Comment: "Add initialization statements here that do NOT require any library being initialized already.";
		}
		Procedure PostMainInitialization {
			Body: {
				! sp_myIPAddress := "143.178.92.106" ; ! Chris
				! sp_myIPAddress := "200.171.138.212" ; ! Gabi
				! sp_myIPAddress := "111.222.111.222" ; ! South East China
				! sp_myIPAddress := "123.123.123.123" ; ! Beijing
				sp_myIPAddress := "111.111.111.111" ; ! Tokyo, Japan.
				
				CurrentInputs -= Outputs;
				dex::ReadAllMappings();
			}
			Comment: {
				"Add initialization statements here that require that the libraries are already initialized properly,
				or add statements that require the Data Management module to be initialized."
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that require all libraries to be still alive.
				Return 1 if you allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence."
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
			Comment: {
				"Add termination statements here that do not require all libraries to be still alive.
				Return 1 to allow the termination sequence to continue.
				Return 0 if you want to cancel the termination sequence.
				It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
			}
		}
	}
}
