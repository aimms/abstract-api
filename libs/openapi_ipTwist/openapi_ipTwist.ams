## ams_version=1.0

LibraryModule openapi_ipTwist {
	Prefix: ipTwist;
	Interface: Public_section;
	Section Public_section {
		Procedure pr_readMappings {
			Body: {
				DirectoryOfLibraryProject("openapi_ipTwist", sp_libFolder);
				dex::ReadMappings(
					startPath :  sp_libFolder, 
					subFolder :  "Generated/openapi-ipTwist", 
					recursive :  0);
			}
			StringParameter sp_libFolder;
		}
		Section Schema_Data {
			Set Instances {
				Index: i_instance, i_childInstance;
				Parameter: CurrentInstance, NewInstance, CallInstance;
			}
			Set Iterators {
				SubsetOf: Integers;
				Index: iter;
			}
			Module Request_ {
				Prefix: _Request;
				StringParameter ip {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				Procedure EmptyInstance {
					Arguments: (instance_);
					Body: {
						InstancesToEmpty += instance_;
						
						empty ip(i_empty_inst);
					}
					Comment: "Empties all data for instance of current schema";
					DeclarationSection Locals {
						ElementParameter instance_ {
							Range: Instances;
							Property: Input;
						}
						Set InstancesToEmpty {
							SubsetOf: Instances;
							Index: i_empty_inst;
						}
					}
				}
			}
			Module Response_ {
				Prefix: _Response;
				StringParameter ip {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				StringParameter city {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				StringParameter country {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				StringParameter country_code {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				Parameter latitude {
					IndexDomain: (ipTwist::i_instance);
					Default: 0;
				}
				Parameter longitude {
					IndexDomain: (ipTwist::i_instance);
					Default: 0;
				}
				StringParameter state {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				StringParameter timezone_ {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				StringParameter zip {
					IndexDomain: (ipTwist::i_instance);
					Default: "";
				}
				Procedure EmptyInstance {
					Arguments: (instance_);
					Body: {
						InstancesToEmpty += instance_;
						
						empty ip(i_empty_inst), city(i_empty_inst), country(i_empty_inst), country_code(i_empty_inst), latitude(i_empty_inst),
						      longitude(i_empty_inst), state(i_empty_inst), timezone_(i_empty_inst), zip(i_empty_inst);
					}
					Comment: "Empties all data for instance of current schema";
					DeclarationSection Locals {
						ElementParameter instance_ {
							Range: Instances;
							Property: Input;
						}
						Set InstancesToEmpty {
							SubsetOf: Instances;
							Index: i_empty_inst;
						}
					}
				}
			}
		}
		Module API_Client_Procedures {
			Prefix: api;
			Set RequestHeaders {
				Index: header;
				Definition: data { 'X-IPTWIST-TOKEN' };
				Comment: "Set containing the request headers used by any method in the OpenAPI specification";
			}
			Set ResponseHeaders {
				Comment: "Set containing the response headers used by any method in the OpenAPI specification";
			}
			Set Cookies {
				Index: cookie;
				Comment: "St containing the cookies used by any method in the OpenAPI specification";
			}
			StringParameter APIServer {
				Default: "";
				Comment: "Base url prefixed to the method paths of all API methods";
			}
			Set SecuritySchemes {
				Index: secscheme;
				Definition: data { 'X-IPTWIST-TOKEN' };
				Comment: "Set containing the names of security schemes specified in the OpenAPI specification";
			}
			StringParameter APIKey {
				IndexDomain: (secscheme);
				Default: "";
				Comment: "Parameter holding the API key for any security scheme to be used by an API method";
			}
			ElementParameter OAuth2APIClient {
				Range: dex::oauth::APIClients;
				Default: '';
				Comment: "Parameter holding the OAuth2 configuration to be used by an API method";
			}
			Parameter IntOptions {
				IndexDomain: dex::client::intopt;
				InitialData: data { FOLLOWLOCATION : 1, MAXREDIRS : 10, SSL_OPTIONS : 2, HTTP_VERSION : 3 };
				Comment: "Set with all CURL integer options passed to all API calls";
			}
			StringParameter StringOptions {
				IndexDomain: dex::client::stropt;
				InitialData: data { ACCEPT_ENCODING : "gzip, deflate" };
				Comment: "Set with all CURL string options passed to all API calls";
			}
			ElementParameter CallStatusCode {
				IndexDomain: (i_instance);
				Range: dex::HTTPStatusCodes;
				Default: '';
				Comment: "Parameter holding the status codes of all API calls made";
			}
			Parameter CallErrorCode {
				IndexDomain: (i_instance);
				Default: 0;
				Property: Integer;
				Comment: "Parameter holding the CURL error codes of all API calls made";
			}
			Parameter CallTime {
				IndexDomain: (i_instance);
				Default: 0;
				Comment: "Parameter holding the roundtrip time of all API calls made";
			}
			Parameter MaxCallInstance {
				Default: 0;
				Property: Integer;
				Comment: "Counter used to create a new call instance";
			}
			StringParameter RequestResponseFilePrefix {
				Default: "";
				Comment: {
					"Prefix for all request and response files to, e.g., specify a subdirectoy, or 
					indicate the use of memory streams, see https://documentation.aimms.com/dataexchange/api.html#memory-streams"
				}
			}
			Parameter RequestTracing {
				Default: 0;
				Comment: "Flag to indicate whether or not to create CURL trace files for all API calls";
			}
			Procedure NewCallInstance {
				Arguments: (callInstance);
				Body: {
					MaxCallInstance += 1;
					SetElementAdd(ipTwist::Instances, callInstance, FormatString("call-%i", MaxCallInstance));
				}
				Comment: "Procedure for creating a new call instance";
				DeclarationSection Locals {
					ElementParameter callInstance {
						Range: Instances;
						Property: Output;
					}
				}
			}
			Procedure UserRequestResponseHookPrototype {
				Arguments: (callInstance);
				Comment: "Prototype that any request or response user hook procedure must adhere to";
				DeclarationSection Locals {
					ElementParameter callInstance {
						Range: Instances;
						Property: Input;
					}
				}
			}
			Module post__ {
				Prefix: post_;
				Procedure apiCall {
					Arguments: (callInstance);
					Body: {
						! Set the relative method URL and set CurrentInstance needed by the schema mapping files
						url := "/";
						Iterators += { 1 };
						ipTwist::CurrentInstance := callInstance;
						
						! For all method arguments, apply the path substitutions or add the query parameters
						
						! Create the final method url. If query parameters are present, append them to the url
						if (Card(QueryParamValue)) then dex::client::QueryMapEncode(QueryParamValue,qparval); url := FormatString("%s%s?%s", APIServer, url, qparval);
						                           else url := FormatString("%s%s", APIServer, url); endif;
						
						if (not RequestFile('requestbody')) then
							! If not provided explicitly, write the request file using the Request schema
							RequestFile('requestbody') := FormatString("%srequest-%s.json", ipTwist::api::RequestResponseFilePrefix, callInstance);
							requestFileMapping('requestbody') := "Generated/openapi-ipTwist/Request";
							dex::WriteToFile(RequestFile('requestbody'), requestFileMapping('requestbody'), 0);
						endif;
						
						! Create a callInstance-specific respone and tracing file if necessary and create the CURL request
						ResponseFile(callInstance,'responsebody') := FormatString("%sresponse-%s", ipTwist::api::RequestResponseFilePrefix, callInstance);
						if (ipTwist::api::RequestTracing) then TracingFile(callInstance) := FormatString("%stracing-%s", ipTwist::api::RequestResponseFilePrefix, callInstance); endif;
						
						dex::client::NewRequest(callInstance, url, 'ipTwist::api::post_::callback', 'post', RequestFile('requestbody'), ResponseFile(callInstance,'responsebody'), TracingFile(callInstance));
						
						! Add an API key header or an OAuth2 bearer token to authorize the API call
						RequestHeaderValue('X-IPTWIST-TOKEN') := ApiKey('X-IPTWIST-TOKEN');
						if (OAuth2APIClient) then dex::oauth::AddBearerToken(OAuth2APIClient, callInstance); endif;
						
						! If a user request hook is defined for the method, call it prior to finishing and performing the request
						if (NonDefault(ipTwist::api::post_::UserRequestHook)) then apply(ipTwist::api::post_::UserRequestHook, callInstance); endif;
						
						! Add any method headers present
						dex::client::AddRequestHeaders(callInstance, RequestHeaderValue);
						
						! Add any cookies present
						for (cookie | CookieValue(cookie)) do cookieString $+= ", "; cookieString += CookieValue(cookie); endfor;
						if (cookieString) then dex::client::AddStringOption(callInstance, dex::client::CurlOptionId('COOKIE'), cookieString); endif;
						
						! Add the global CURL options specified for this API
						dex::client::AddRequestOptions(callInstance, ipTwist::api::IntOptions, ipTwist::api::StringOptions);
						
						! Finally, perform the API call
						dex::client::PerformRequest(callInstance);
					}
					Comment: "Geolocate a given IP address";
					DeclarationSection Locals {
						ElementParameter callInstance {
							Range: Instances;
							Property: Input;
						}
						StringParameter url {
							Default: "";
						}
						StringParameter urlEncodedArg {
							Default: "";
						}
						Set QueryParams {
							Index: qpar;
						}
						StringParameter QueryParamValue {
							IndexDomain: (qpar,iter);
							Default: "";
						}
						StringParameter qparval;
						StringParameter requestFileMapping {
							IndexDomain: (reqpart);
							Default: "";
						}
						StringParameter cookieString {
							Default: "";
						}
					}
				}
				Procedure callback {
					Arguments: (theRequest,statusCode,errorCode);
					Body: {
						! Re-create the callInstance element from theRequest and set CurrentInstance needed by the schema mapping files
						callInstance := StringToElement(ipTwist::Instances, theRequest);
						ipTwist::CurrentInstance := callInstance;
						
						! Determine and store the HTTP status code
						status_ := StringToElement(dex::HTTPStatusCodes, statusCode);
						CallStatusCode(callInstance) := status_;
						CallErrorCode(callInstance) := errorCode;
						
						! Don't parse responses if there is a CURL error code, but do call the response hook
						if (errorCode) then
							if (NonDefault(ipTwist::api::post_::UserResponseHook)) then apply(ipTwist::api::post_::UserResponseHook, callInstance); endif;
							return;
						endif;
						
						! Get the roundtrip time for the API call
						dex::client::GetIntInfoItem(callInstance, dex::client::CurlInfoId('TOTAL_TIME_T'), ipTwist::api::CallTime(callInstance));
						CallTime(callInstance) /= 1000000;
						
						! Store all response headers returned in the response
						dex::client::GetResponseHeaders(callInstance, ResponseHeaderValue(callInstance,respheader));
						
						! Based on the HTTP status, handle the response using the appropriate schema
						switch (status_) do
							'200':
								if (DeserializeResponse('200')) then
									! Conditionally read the response file using the Response schema
									responseFileMapping('responsebody') := "Generated/openapi-ipTwist/Response";
									dex::ReadFromFile(ResponseFile(callInstance,'responsebody'), responseFileMapping('responsebody'), 0, 0, 0);
								endif;
						
							'401':
							'403':
						endswitch;
						
						! If a user response hook is defined for the method, call it here after retrieving and storing all response data
						if (NonDefault(ipTwist::api::post_::UserResponseHook)) then apply(ipTwist::api::post_::UserResponseHook, callInstance); endif;
					}
					DeclarationSection Locals {
						StringParameter theRequest {
							Property: Input;
						}
						Parameter statusCode {
							Property: Input;
						}
						Parameter errorCode {
							Property: Input;
						}
						ElementParameter callInstance {
							Range: Instances;
							Default: '';
						}
						ElementParameter status_ {
							Range: dex::HTTPStatusCodes;
							Default: '';
						}
						StringParameter responseFileMapping {
							IndexDomain: (resppart);
							Default: "";
						}
					}
				}
				Set RequestHeaders {
					SubsetOf: ipTwist::api::RequestHeaders;
					Index: reqheader;
					Definition: data { 'X-IPTWIST-TOKEN' };
					Comment: "Set of all request headers used by this method";
				}
				StringParameter RequestHeaderValue {
					IndexDomain: reqheader;
					Default: "";
					Comment: "Parameter holding the values of all request headers used by this method";
				}
				Set ResponseHeaders {
					SubsetOf: ipTwist::api::ResponseHeaders;
					Index: respheader;
					Comment: "Set of all response headers used by this method";
				}
				StringParameter ResponseHeaderValue {
					IndexDomain: (i_instance,respheader);
					Default: "";
					Comment: "Parameter holding the values of all response headers used by this method";
				}
				Set Cookies {
					SubsetOf: ipTwist::api::Cookies;
					Index: cookie;
					Comment: "Set of all cookies used by this method";
				}
				StringParameter CookieValue {
					IndexDomain: cookie;
					Default: "";
					Comment: "Parameter holding the values of all cookies used by this method";
				}
				Set RequestParts {
					Index: reqpart;
					InitialData: data { requestbody };
				}
				StringParameter RequestFile {
					IndexDomain: reqpart;
					Default: "";
					Comment: {
						"Parameter holding the names of the file(s) to be used in the API call.
						If request file has been specified for the request body or a part of a multi-part body, you must specify them here."
					}
				}
				Set ResponseParts {
					Index: resppart;
					InitialData: data { responsebody };
				}
				StringParameter ResponseFile {
					IndexDomain: (i_instance, resppart);
					Default: "";
					Comment: "Parameter holding the names of the file(s) returned by the API call.";
				}
				StringParameter TracingFile {
					IndexDomain: (i_instance);
					Default: "";
					Comment: "Parameter holding the name of the tracing file for an api call (if any).";
				}
				Parameter DeserializeResponse {
					IndexDomain: (dex::statclass);
					Default: 1;
					Comment: "Method-specific flag to indicate for which status classes response files should be deserialized, or be left to the model";
				}
				ElementParameter UserRequestHook {
					Range: AllProcedures;
					Default: 'ipTwist::api::UserRequestResponseHookPrototype';
					Comment: "Request hook procedure that can be defined by the app developer and will be called prior to performing the API call";
				}
				ElementParameter UserResponseHook {
					Range: AllProcedures;
					Default: 'ipTwist::api::UserRequestResponseHookPrototype';
					Comment: "Response hook procedure that can be defined by the app developer and will be called in the method callback";
				}
			}
		}
	}
	Section Private_section {
		Section Library_initialization_and_termination {
			Function LibraryDirectory {
				Arguments: (sp_libraryName);
				Range: string;
				Body: {
					if DirectoryOfLibraryProject(sp_libraryName, LibraryDirectory) <> 1 then
						LibraryDirectory := sp_libraryName;
					endif;
				}
				StringParameter sp_libraryName {
					Property: Input;
				}
			}
			StringParameter sp_openapi_ipTwist_LibraryPath {
				Definition: {
					LibraryDirectory("openapi ipTwist");
				}
			}
			Procedure LibraryInitialization {
				Body: {
					!display "LibraryInitialization" ;
				}
				Comment: "Add initialization statements here that do not require any other library being initialized already.";
			}
			Procedure PostLibraryInitialization {
				Body: {
					!display "PostLibraryInitialization";
					!display dex::Mappings ;
					!
				}
				Comment: {
					"Add initialization statements here that require another library to be initialized already,
					or add statements that require the Data Management module to be initialized."
				}
			}
			Procedure PreLibraryTermination {
				Body: {
					return 1 ;
				}
				Comment: {
					"Add termination statements here that require all other libraries to be still alive.
					Return 1 if you allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence."
				}
			}
			Procedure LibraryTermination {
				Body: {
					return 1 ;
				}
				Comment: {
					"Add termination statements here that do not require other libraries to be still alive.
					Return 1 to allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence.
					It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
				}
			}
			Procedure pr_temp {
				Body: {
					DirectoryOfLibraryProject("openapi_ipTwist", sp_libFolder);
					display sp_libFolder ;
				}
				StringParameter sp_libFolder;
			}
		}
	}
}
